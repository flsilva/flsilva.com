textile:
  This article is a short introduction to the basic concepts of UML (Unified Modeling Language). It's a fast way to understand main elements of software architecture and design represented by UML. It doesn't go into technical details about its implementation (its notation and implementation by UML modeling programs). It's also targeted to non-developer professionals that are directly related to software development processes, such as project coordinators and project managers.

  h3(#what-is-uml). What is UML?

  * UML = Unified Modeling Language.
  * "UML is the standard modeling language for software and systems development." (Russ and Hamilton 1).
  * "In 2000 the Unified Modeling Language was accepted by the International Organization for Standardization (ISO) as industry standard for modeling software-intensive systems." ("Unified Modeling Language")

  h3(#why-modeling). Why modeling?

  * Modeling is useful to help managing complexity.
  * Modeling helps you see the big picture, focusing on the important aspects of your system's design.

  h3(#what-is-a-model). What is a model?

  * A model is an abstraction of the real thing, leaving out details.
  * "The collection of all the elements that describe your system, including their connections to each other, make up your model." (Russ and Hamilton 12).

  h3(#why-uml). Why UML?

  * Because UML is a formal language. Its elements are simple and have a strongly defined meaning.
  * It's scalable from small to large projects and is an open standard widely used in the object-oriented community.
  * It's effective.

  h3(#how-much-uml). How much UML?

  * The amount of modeling basically depends on the type of the system and the software development process used (waterfall, iterative, agile, etc).

  h3(#what-is-a-requirement). What is a requirement?

  * A requirement is a statement that identifies a critical need a system must meet in order to have value.
  * Requirements should drive software modeling and development processes.

  h3(#what-are-functional-requirements). What are functional requirements?

  * Functional requirements are requirements that capture how the system should behave, what functionalities it must execute, **what it is supposed to do**.

  h3(#what-are-non-functional-requirements). What are non-functional requirements?

  * Non-functional requirements are requirements that define **how a system is supposed to be**. It's related to quality attributes of the system. These requirements are most expensive and difficult to implement.
  * Some non-functional requirements (quality factors) are: testability, maintainability, scalability, usability, availability, portability, security, accuracy, cost, performance, programming languages, etc.

  h3(#what-is-a-use-case). What is a Use Case?

  * A use case is a situation where your system is used by external actors to perform some task that is directly related to functional requirements.
  * Every use case must have a very clear pass/fail criteria.
  * "The use case is probably the single most powerful construct in UML to make sure your system does what it is supposed to." (Russ and Hamilton 26)

  h3(#what-is-an-actor). What is an Actor?

  * An Actor is something that is outside of your system but which interacts with it. You don't have control over actors. It can be a person or anything else, like another system.

  h3(#what-is-a-primary-actor). What is a Primary Actor?

  * A Primary Actor is one that initiates the interaction with the system to perform a certain task.

  h3(#what-is-a-secondary-actor). What is a Secondary Actor?

  * A Secondary Actor is one from which the system needs assistance to complete a goal.

  h3(#4-1-architectural-view-model). 4+1 Architectural View Model

figure
  img src="/images/blog/uml/4+1-view-model.gif" alt="Git Workflow" width="265" height="164" style="background-color: #F9F9F9;"
  figcaption Philippe Kruchten's 4+1 architectural view model.

textile:
  "The views are used to describe the system from the viewpoint of different stakeholders, such as end-users, developers and project managers." ("Unified Modeling Language")

  h4(#logical-view). Logical View

  “Used to model what a system is made up of and how the parts interact with each other.” (Russ and Hamilton 14)
  It is composed by Class, Object, State Machine, Sequence and Interaction diagrams.

  h4(#process-view). Process View

  Process view is used to model and visualize what must happen inside a system.
  It is composed by Activity diagrams.

  h4(#development-view). Development View

  “Describes how your system's parts are organized into modules and components.” (Russ and Hamilton 14)
  It is composed by Package and Component diagrams.

  h4(#physical-view). Physical View

  Physical view shows what are the real-world artifacts produced by the system's architecture.
  It is composed by Deployment diagrams.

  h4(#use-case-view). Use Case View

  “Describes the functionality of the system being modeled from the perspective of the outside world. This view is needed to describe what the system is supposed to do. All of the other views rely on the use case view to guide them—that's why the model is called 4+1.” (Russ and Hamilton 14)
  It is composed by Use Case, Description and Overview diagrams.

  There's much more about UML than what is described here, but hopefully you have now an overview on the topic. Any questions and suggestions are welcome.

  h3(#related-posts). Related Posts

  "What is a Product Specification?":/blog/what-is-a-product-specification/

  h3(#interesting-links). Interesting Links

  <a href="http://en.wikipedia.org/wiki/Unified_Modeling_Language" target="_blank">Unified Modeling Language (Wikipedia)</a>
  <a href="http://en.wikipedia.org/wiki/4%2B1_Architectural_View_Model" target="_blank">4+1 architectural view model (Wikipedia)</a>
  <a href="http://en.wikipedia.org/wiki/Object_Management_Group" target="_blank">Object Management Group (Wikipedia)</a>

  h3(#bibliography). Bibliography

  Miles, Russ and Kim Hamilton. _Learning UML 2.0_. O'Reilly Media, Inc, 2006.
  "Unified Modeling Language" _Wikipedia_ , n.d. Web. 20 December 2010 <<a href="http://en.wikipedia.org/wiki/Unified_Modeling_Language" target="_blank">http://en.wikipedia.org/wiki/Unified_Modeling_Language</a>>
