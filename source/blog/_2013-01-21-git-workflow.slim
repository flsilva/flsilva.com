textile:

  If you're new to <a href="http://git-scm.com/" target="_blank">Git</a> or want to know a little more about its basics and its distributed model, do not hesitate to read my "Introduction to Git":/blog/introducing-git/.

  <div class="info-box">
  <span class="warning icon"></span>

  If you're very new to Git don't try to run the commands showed in this article, they have missing parameters. This article was written to be a conceptual explanation about the Git workflow. Playing with its commands to better understand its concepts is the subject of the next article about Git: "Git Basic Commands Explained":/blog/git-basic-commands-explained/, which I recommend you read next.
  </div>

  h3(#the-three-file-states). The Three File States

  <a href="http://git-scm.com/" target="_blank">Git</a> works with the concept of three different file states: "_committed_":/blog/git-workflow/#committed-file-state, "_modified_":/blog/git-workflow/#modified-file-state and "_staged_":/blog/git-workflow/#staged-file-state (Chacon 8). Each state relates to a specific Git section: "_working directory_":/blog/git-workflow/#working-directory, "_staging area_":/blog/git-workflow/#staging-area and "_Git directory_":/blog/git-workflow/#git-directory (repository) (Chacon 8). Additionally, any new file you add to the "_working directory_":/blog/git-workflow/#working-directory is an "_untracked file_":/blog/git-workflow/#untracked-file, which means the file doesn't exist in the repository.

  When you create a new repository from scratch running <code class="inline">$ git init</code> in an empty directory, your "_working directory_":/blog/git-workflow/#working-directory (the physical directory that the files reside on your local machine) is empty. And if you <code class="inline">$ git clone</code> some remote repository, your "_working directory_":/blog/git-workflow/#working-directory is fully synchronized with the "_Git directory_":/blog/git-workflow/#git-directory (repository). Thereafter, any changes you make on any file automatically puts it in a "_modified_":/blog/git-workflow/#modified-file-state state. If you add new files, those will be "_untracked_":/blog/git-workflow/#untracked-file. At this time (with modified and/or untracked files), trying to run <code class="inline">$ git commit</code> to send files from the "_working directory_":/blog/git-workflow/#working-directory to the local repository ("_Git directory_":/blog/git-workflow/#git-directory) will have no effect. Git only send files that are in the "_staged_":/blog/git-workflow/#staged-file-state state, which conceptually resides in the "_staging area_":/blog/git-workflow/#staging-area, to the repository. So, before running <code class="inline">$ git commit</code> you must run <code class="inline">$ git add</code> to stage files and directories. When you _add_ files, they go from "_modified_":/blog/git-workflow/#modified-file-state (or "_untracked_":/blog/git-workflow/#untracked-file) state to "_staged_":/blog/git-workflow/#staged-file-state ("_staging area_":/blog/git-workflow/#staging-area) state. After that, running <code class="inline">$ git commit</code> will change the state of the files from "_staged_":/blog/git-workflow/#staged-file-state to "_committed_":/blog/git-workflow/#committed-file-state, leaving the "_staging area_":/blog/git-workflow/#staging-area and going to the "_Git directory_":/blog/git-workflow/#git-directory (repository). Each <code class="inline">$ git commit</code> represents a snapshot of the project.

figure
  img src="/images/blog/git/git-workflow.png" alt="Git Workflow" width="386" height="355"
  figcaption (Chacon 8)

textile:
  <div class="info-box">
  <span class="warning icon"></span>

  When you run <code class="inline">$ git add</code>, Git sends a *snapshot* of the file to the "_staging area_":/blog/git-workflow/#staging-area, not a reference of the file itself, which means if you change that file again after _adding_ and before __commiting__, that change is not in the "_staging area_":/blog/git-workflow/#staging-area. In such case you need to run <code class="inline">$ git add</code> again for that same file. This is an important detail and illustrates how Git works with the snapshot concept.
  </div>

  h3(#summary). Summary

  <span class="small-title" id="working-directory">_Working directory_</span> is your local physical directory, where you make changes to your files.

  <span class="small-title" id="staging-area">_Staging area_</span> is a place where Git keeps a reference of all modifications (snapshot of files) to be sent in the next _commit_.

  <span class="small-title" id="git-directory">_Git directory_</span> is the repository, the Git database which stores all files in a compressed form.

  <span class="small-title" id="untracked-file-state">_Untracked files_</span> reside only in your working directory (i.e. they don't exist in the _Git directory_).

  <span class="small-title" id="modified-file-state">_Modified files_</span> reside both in your _working directory_ and your _Git directory_, but they have different versions, i.e., the _working directory_ files were changed, but those changes weren't sent to the _stagging area_ by running <code class="inline">$ git add</code>.

  <span class="small-title" id="stage-file-state">_Staged files_</span> reside in your _working directory_, and a) reside in the _Git directory_ if they are existing files being changed, or b) do not reside in the _Git directory_ if they are new files being added to the repository for the first time.

  <span class="small-title" id="committed-file-state">_Committed files_</span> reside both in your _working directory_ and _Git directory_ with the exact same version.

  You can run <code class="inline">$ git status</code> at any time to check the state of your files.

  Phew! That was a bit complex, and a pretty much theoretical explanation. Don't worry if things seem a little confusing right now. It'll make a lot more sense once we start playing with the commands in practice, which is the subject of the next Git article: "Git Basic Commands Explained":/blog/git-basic-commands-explained/, which I recommend you read next.

  h3(#related-posts). Related Posts

  "Git Basic Commands Explained":/blog/git-basic-commands-explained/
  "Git Branching and Merging":/blog/git-branching-and-merging/
  "Git Tagging":/blog/git-tagging/
  "Introduction to Git":/blog/introducing-git/

  h3(#interesting-links). Interesting Links

  <a href="http://git-scm.com/" target="_blank">Git</a>
  <a href="http://progit.org/book/" target="_blank">Pro Git Book</a>

  h3(#bibliography). Bibliography

  Chacon, Scott. _Pro Git_. Apress, 2009.
