textile:
  When I started learn <a href="http://git-scm.com/" target="_blank">Git</a> I decided to write this post as a synthesis of what Git is and how it works. At the end I was very pleased with the result and hope you enjoy it too.

  h3. What is Git?

  Popularly, <a href="http://git-scm.com/" target="_blank">Git</a> is known as a <a href="http://en.wikipedia.org/wiki/Revision_control" target="_blank">Version Control System (VCS)</a>, but Git is more than a VCS. Git is a <a href="http://en.wikipedia.org/wiki/Software_configuration_management" target="_blank">Software Configuration Management (SCM)</a> system, because besides files version control, it also has software development process features, such as integration team facilities, merge changes on files, tagging, branching, etc.

  h3. A brief history

  <a href="http://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank">Linus Torvalds</a> started Git development in 2005 with some goals in mind: speed, simple design, strong support for non-linear development, fully distribution and ability to handle large projects (Chacon 5). 75 days after the beginning of its development, Git managed the release of the Linux Kernel 2.6.12 (<a href="http://en.wikipedia.org/wiki/Git_(software)" target="_blank">"Git Software"</a>).

  h3. Git = Distributed Version Control System (DVCS)

  Unlike many VCSs (such as <a href="http://subversion.apache.org/" target="_blank">SVN</a>) that are Centralized Version Control Systems (CVCS), Git is a <a href="http://en.wikipedia.org/wiki/Distributed_revision_control" target="_blank">Distributed Version Control System (DVCS)</a>. This is the crucial difference that sets Git apart from most VCSs (that are CVCSs).

  Git's model implies that there's no central repository. So each client is a repository, and not just have a copy of the versioned files. Typically, each client has its own local repository, and in fact all the work can be done by this way (in a single person project). But this is not recommended because any local HD issue might become a huge problem. A better idea would be to have one more repository in another machine, typically a remote repository on the web. For teamwork, that remote repository becomes a shared repository, and acts as a facilitator for all team members. Imagine a scenario where several developers work on the same project, all they need to do is send (push) their changes to the shared repository and keep up to date from that repository (pull). Thus the shared repository behaves similarly to a central repository, but this is very different from the centralized model, besides the possibility of coexisting multiple shared repositories.

  h3. Advantages of a Distributed Model

  Because each client have a full local repository, nearly every operation is done locally, which means plenty of speed and easiness. While in a centralized model each commit (and other operations, such as consulting a change history) needs to connect to a central repository (often on a remote server), which means low speed and latency.

  h3. Git's Guts

  To really understand how Git works and use it effectively, it's essential to understand the basic concept about storage and versioning of files.

  The way some other VCSs (e.g. <a href="http://subversion.apache.org/" target="_blank">SVN</a>) handle files and versions is storing the base files and then saving the made changes (Chacon 6). So you have the original file and subsequent deltas for each change.

  Git works differently. For each change in any file (commit) Git stores a snapshot of all files (and has intelligence to not duplicate unchanged files) (Chacon 6). So Git works much more like a mini filesystem.

  That is the key about how Git works, and it's what makes it better and richer than other VCSs in terms of features.

  h3. Interesting Links

  <a href="http://git-scm.com/" target="_blank">Git</a>
  <a href="http://progit.org/book/" target="_blank">Pro Git Book</a>
  <a href="http://en.wikipedia.org/wiki/Revision_control" target="_blank">Version Control System (VCS)</a>
  <a href="http://en.wikipedia.org/wiki/Distributed_revision_control" target="_blank">Distributed Version Control System (DVCS)</a>
  <a href="http://en.wikipedia.org/wiki/Software_configuration_management" target="_blank">Software Configuration Management (SCM)</a>

  h3. Bibliography

  Chacon, Scott. _Pro Git_. Apress, 2009.
  "Git Software" _Wikipedia_ , n.d. Web. 19 January 2011 <<a href="http://en.wikipedia.org/wiki/Git_(software)" target="_blank">http://en.wikipedia.org/wiki/Git_(software)</a>>

== partial "partials/creative-commons-by-nc-sa"
