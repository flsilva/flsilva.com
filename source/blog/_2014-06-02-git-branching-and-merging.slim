textile:

  If you're new to <a href="http://git-scm.com/" target="_blank">Git</a> or want to know a little more about its basics and its distributed model, do not hesitate to read my "Introduction to Git":/blog/introducing-git/.

  Branching and merging are great features, but to be really effective their implementations must be optimal, and Git excels here. The way it implements and exposes it for us is very simple, powerful, and fast to use. But the branching concept, and the way it works on Git, may look a little complex in the beginning. In this article I'll try to explain how it works in an easy and concise way, so you can take full advantage of its power. Let's start by explaining what is branching.

  h3(#what-is-branching). What is Branching?

  "Branching means you diverge from the main line of development and continue to do work without messing with that main line." (Chacon 47)

  So it means you create a **new** __branch__ to diverge from the **main** __branch__.

  h3(#why-branching). Why Branching?

  Branching has several use cases, and it's a very important feature, but you should know how to use it in your development cycle. That's out of the scope of this article, but to give you an example you can think that your project needs a change that can break things up, so you decide to create a new branch to work on those changes. That way you can go back to the main branch (usually __master__) at any time, and do any other modifications, even releasing a new version, without worrying about those potential breaking changes, because they are isolated in another branch. You can also create a new branch to experiment new things, implement new features, etc. Sounds good? It really is.

  h3(#the-master-branch-and-head). Master Branch and HEAD pointer

  When you run <code class="inline">$ git init</code> or <code class="inline">$ git clone</code> commands to create a new repository, Git automatically creates a __master__ branch for you, and points development to it. Git has a special pointer to know what is the current branch, and it's called __HEAD__. It's different than the concept of __HEAD__ in other VCSs. __HEAD__ in Git means the last snapshot (commit) of the current branch. How do you know what branches you have, and which is the current one? That's easy, you just run <code class="inline">$ git branch</code>. If you run that right after <code class="inline">$ git init</code>, you should see something like:

  <code class="inline">* master</code>

  That means you only have __master__ branch, and it's the current one, indicated by the <code class="inline">*</code> sign.

  h3(#the-current-branch). Current Branch

  Now, it's important to say that nearly every concept "we've learned so far":/blog/git-workflow is related to the current branch we're pointing to at the moment we run our commands. So, "_modified_":/blog/git-workflow/#modified-file-state and "_staged_":/blog/git-workflow/#staged-file-state files, "_working directory_":/blog/git-workflow/#working-directory, "_staging area_":/blog/git-workflow/#staging-area, etc, are all related to the current branch ("_Git directory_":/blog/git-workflow/#git-directory is an exception here, as it's the same for all branches in the project). Each branch has those concepts in an isolated way. Another import thing to note is that when you switch between branches, your "_working directory_":/blog/git-workflow/#working-directory changes to reflect files (and their versions) of the target branch.

  h3(#starting-a-new-repository-from-scratch). Starting a New Repository from Scratch

  (If you don't know Git's basic commands please head to "Git Basic Commands Explained":/blog/git-basic-commands-explained, then come back.)

  To illustrate how branching works, let's imagine a scenario: you just started a new repository, have made some changes and three commits in your __master__ branch, so it looks like the following:

figure
  img src="/images/blog/git/git-branching-01.png" alt="Git Branching - Image 01" width="445" height="224" style="background:white;"
  figcaption Figure 1. Git repository with only one branch (master) pointing to it (HEAD), and with only three commits (<code class='inline' data-language='shell'>f30ab</code> is your last commit). This image was taken from Pro Git book and edited (respecting its Creative Commons License).

textile:
  So, to Git, what really is a branch? Just a lightweight movable pointer to one of its commits (Chacon 48). Every time you commit, the current branch moves forward automatically to that commit. And every commit has one parent commit (except the first one), represented by the arrows on Figure 1.

  When you create a new branch, it starts pointing to the last commit of the current branch, i.e., the branch you are in at the moment you create your new branch. So, immediately after creating a new branch, it's pointing to the same commit of the branch you were in, which means the working directory of your new branch will be the same as the branch you were in.

  h3(#creating-a-new-branch). Creating a New Branch

  Let's create a new branch (__testing__), change the pointer to it, make some changes and commit.


  <div class="info-box">
  <span class="warning icon"></span>

  Git doesn't allow us to switch between branches if we have uncommited changes in our working directory or stagging area.
  </div>

  To create a new branch you run a command like <code class='inline' data-language='shell'>git branch [branch-name]</code>, for example:

  <code class='inline' data-language='shell'>
  $ git branch testing
  </code>

  But that command doesn't point to it automatically (it doesn't move your __HEAD__ pointer). If you run <code class='inline' data-language='shell'>git branch</code> now, you should see something like:

  <pre><code data-language='shell'>
  * master
    testing
  </code></pre>
  
  That pretty much confirms we now have a __testing__ branch, but we're still pointing to __master__. You need to run a command like <code class='inline' data-language='shell'>git checkout [branch-name]</code> to switch between branches, for example:

  <code class='inline' data-language='shell'>
  $ git checkout testing
  </code>

  Now we should be pointing to __testing__. If we run <code class='inline' data-language='shell'>git branch</code> now, we should see something like:
  
  <pre><code data-language='shell'>
    master
  * testing
  </code></pre>
  
  Cool. So, now let's imagine you made some changes to some files and committed them. The state of your repo would be like so:

figure
  img src="/images/blog/git/git-branching-02.png" alt="Git Branching - Image 02" width="500" height="287" style="background:white;"
  figcaption Figure 2. Git repository with two branches (master and testing), pointing to testing (HEAD), and with three commits in master and one in testing. This image was taken from Pro Git book (respecting its Creative Commons License).

textile:

  h3(#merging). Merging

  Usually, you'll want to merge your new branch (__testing__ in this case) into your main one (__master__) at some point, if you were successful in your changes, so you can keep working from it again, even creating new branches in the future. The way Git handles merging is very nice too, but it depends on the state of your files. Next, you'll see those cases.

  h3(#fast-forward-merge). Fast Forward Merge

  In the current state of our repository, if you want to merge __testing__ into __master__, it would be the simplest kind of merge that can possibly exist. Because you didn't make any changes in your __master__ branch *after* creating your new __testing__ branch, running <code class="inline">merge</code> command just moves __master__ forward to point to the last commit in the __testing__ branch, which in this case is the next commit, but you could have made __n__ commits in __testing__ before merging it. To merge two branches, you have to point to the branch you want to merge into (__master__ in this case, which will receive changes from __testing__) and run a <code class="inline">merge</code> command:

  <pre><code data-language='shell'>
  $ git checkout master
  $ git merge testing
  </code></pre>

  You'll notice a __Fast forward__ feedback, indicating a simple forward. After that, your two branches point to a common commit again, as they were doing right after you created your __testing__ branch). At this point you can delete your __testing__ branch by running a command like <code class="inline">$ git branch -d [branch-name]</code>, for example:

  <code class='inline' data-language='shell'>
  $ git branch -d testing
  </code>

  That's the simplest merge possible, and it'll never render a conflict. But you want to be prepared for the real world, right? So you can be sure that conflicts will arise at some point! ;-)

  h3(#three-way-merge). Three-Way Merge

  To simulate another possible merge case, a more complex one, let's pretend we didn't run the merge command above.

  Let's go back to our __master__ branch by running <code class="inline">$ git checkout master</code> (remember: when you switch between branches, your working directory changes too). Let's then make a change and commit it. So now this is the state of our repository:

figure
  img src="/images/blog/git/git-branching-03.png" alt="Git Branching - Image 03" width="500" height="382" style="background:white;"
  figcaption Figure 3. The last two commits (<code class="inline">c2b9e</code> and <code class="inline">87ab2</code>) are isolated in separate branches. This image was taken from Pro Git book (respecting its Creative Commons License).

textile:

  Now, we have isolated commits in both branches. Trying to merge them now will give Git some work. If no conflicts arise, i.e., if there are no changes in the same part of the same files, Git can do everything by itself, automatically.

  So, in such case, what will Git do after we run <code class="inline">merge</code>? Try it!

  Git will do a simple three-way merge, using the last snapshot (commit) of each branch plus the common ancestor of both (<code class="inline">f30ab</code> in Figure 3). To do that, Git creates a new snapshot (commit) that is referred to as a __merge commit__, and it's special because it has more than one parent (Chacon 57):

figure
  img src="/images/blog/git/git-branching-04.png" alt="Git Branching - Image 04" width="670" height="382" style="background:white;"
  figcaption Figure 4. Git creates a new commit containing your merged changes. Note that that new commit (<code class="inline">09b8e</code>) has two parents. This image was taken from the Pro Git book and edited (respecting its Creative Commons License).

textile:

  You'll notice a __Merge made by recursive__ feedback, indicating a more complex merging. After that, you can delete your __testing__ branch if you're not planning to work on it in the near future.

  You now might be thinking about conflicts, are you?

  h3(#resolving-conflicts). Resolving Conflicts

  Everything is nice and clear when we don't get conflicts. But fear nothing, Git is very elegant to handle conflicts too, you should have guessed it at this point.

  Let's suppose you've changed the same lines of a text file in both branches (__testing__ and __master__), and tried to merge them. Git will give you a feedback like this:

  <pre><code>
  Auto-merging file-name
  CONFLICT (content): Merge conflict in file-name
  Automatic merge failed; fix conflicts and then commit the result.
  </code></pre>

  If you run <code class="inline">$ git status</code> now, Git will show you an __Unmerged paths__ section listing files that are in a conflict state (__both modified__). And this time Git didn't create a new merge commit for us, as the merge has failed.

  But such conflict is very simple to fix. If you open that file, you should see something like this:

  <pre><code>
  <<<<<<< HEAD
  This section was changed by master branch.
  =======
  This section was changed by testing branch.
  >>>>>>> testing
  </code></pre>

  Everything that is below <code class="inline"><< HEAD</code> and above <code class="inline">==</code> is the __HEAD__ version of the file (the last snapshot of the current branch when you run <code class="inline">merge</code>), in this case, the __master__ branch version of the file. And everything above <code class="inline">>> testing</code> and below <code class="inline">==</code> is the version of the file in the other branch (__testing__, in this case).

  From the Git perspective, to fix that conflict you just have to remove those Git markers, manually, and save the file. Also, if you prefer you can run <code class="inline">$ git mergetool</code> to open a visual merge tool.

  After removing those markers, you need to tell Git that you've fixed that conflict. You do that by running <code class="inline">add</code>:

  <code class='inline' data-language='shell'>
  $ git add file-name
  </code>

  Now, when you commit your changes the merge will be done.

  h3(#conclusion). Conclusion

  As we can see, Git handles branching and merging in a very elegant and fast way, you do everything in your local repository.

  In the same way that you've created your __testing__ branch, you can create any number of branches, in any direction. Your __master__ branch can have any number of __child__ branches, and a __child__ branch (like __testing__ in this example) can also have any number of __child__ branches, and so on... To merge them all, a common approach is to merge a branch into its __parent__ one, and so on.

  So, that's it. Hopefully you now understand __local__ branches much better. In the next article I'll talk about remote branches and tracking branches. Don't worry, now that you understand the basics about branching, it should be simple to understand the rest of the concept.

  h3(#related-posts). Related Posts

  "Git Remote and Tracking Branches":/blog/git-remote-and-tracking-branches/
  "Git Tagging":/blog/git-tagging/
  "Git Basic Commands Explained":/blog/git-basic-commands-explained/
  "Git Workflow":/blog/git-workflow/
  "Introduction to Git":/blog/introducing-git/

  h3(#interesting-links). Interesting Links

  <a href="http://git-scm.com/" target="_blank">Git</a>
  <a href="http://progit.org/book/" target="_blank">Pro Git Book</a>

  h3(#bibliography). Bibliography

  Chacon, Scott. _Pro Git_. Apress, 2009.
