textile:
  My previous article about Git ("Git Workflow":/blog/git-workflow) was too much theoretical, but that was intentional. I believe it's necessary to understand some of the core concepts of Git to make proper use of it, in an easy and intuitive way. If you haven't read it yet, I recommend you doing so before proceeding.

  Now, we'll play with some of its basic commands, and hopefully it'll make those concepts a lot easier to understand.

  <div class="info-box">
  <span class="warning icon"></span>

  Do not type the <code class='inline' data-language='shell'>$</code> sign you see in the command examples. That's just an indicator that you should run the command that follows it in your command line tool.

  </div>

  h3(#global-settings). Global Settings

  The first thing you should do when you install Git is to set your name and e-mail address. This is important because every Git _commit_ uses this information. To do so, please run the following commands:

  <code class='inline' data-language='shell'>
  $ git config --global user.name "Your Name"
  </code>
  <code class='inline' data-language='shell'>
  $ git config --global user.email youremail@example.com
  </code>

  Using <code class='inline' data-language='shell'>--global</code> option makes it globally available for Git, so available to any repository you work on. If you want to override that information for a specific repo, just go to that repo's root directory and run the command without <code class='inline' data-language='shell'>--global</code> option.

  h3(#creating-a-new-repository). Creating a new repository

  There are two ways to create a new Git repo: using <code class='inline' data-language='shell'>init</code> or <code class='inline' data-language='shell'>clone</code> commands. Let's start by <code class='inline' data-language='shell'>init</code>.

  Go to the directory that will be your repository and run:

  <code class='inline' data-language='shell'>
  $ git init
  </code>

  That starts a new repository and creates a *local* _master_ branch. Donâ€™t worry about it right now, "branching":/blog/git-branching-and-merging/ is the subject of our next article about Git.

  h3(#cloning-an-existing-repository). Cloning an existing repository

  To clone an existing remote repository go to the directory that you want to create your new repo and run a command like <code class='inline' data-language='shell'>$ git clone [url]</code>, for example:

  <code class='inline' data-language='shell'>
  $ git clone git://github.com/flsilva/as3coreaddendum.git
  </code>

  That will create an <code class='inline' data-language='shell'>as3coreaddendum</code> directory in your file system.

  h3(#checking-the-status-of-your-files). Checking the status of your files

  After making changes, adding, and deleting files, you'll frequently use the <code class='inline' data-language='shell'>status</code> command to check the status of your local repository:

  <code class='inline' data-language='shell'>
  $ git status
  </code>

  When you see a message like __nothing to commit, working directory clean__, it means that your "_working directory_":/blog/git-workflow/#working-directory is fully synchronized with your local repository, i.e., there are no changes to be committed.

  When you see a message like __Changes not staged for commit__, it means that you've made changes to tracked files (files already in your local repo) but have not added them to the "_staging area_":/blog/git-workflow/#staging-area, which means they will *not* be committed when you run <code class='inline' data-language='shell'>commit</code> command. Usually, you'll also see a message like __Untracked files__, which means there are new files not added to the "_staging area_":/blog/git-workflow/#staging-area.

  h3(#adding-changes-to-the-staging-area). Adding changes to the staging area

  After making some changes to your files and checking their status, you'll want to add your changes to the "_staging area_":/blog/git-workflow/#staging-area. There are two main ways to do that, running the <code class='inline' data-language='shell'>add</code> command for individual files (or directories):

  <code class='inline' data-language='shell'>
  $ git add file-name
  </code>

  Or:

  <code class='inline' data-language='shell'>
  $ git add directory-name
  </code>

  Or running <code class='inline' data-language='shell'>add</code> for all your files and directories:

  <code class='inline' data-language='shell'>
  $ git add -A
  </code>

  Or, alternatively:

  <code class='inline' data-language='shell'>
  $ git add .
  </code>

  After that you can check the status of your files again:

  <code class='inline' data-language='shell'>
  $ git status
  </code>

  Now you should see a message like __Changes to be committed__. That means that you've staged your changes, and they are ready to be committed.

  h3(#committing-changes-to-the-local-repository). Committing changes to your local repository

  Every time you run <code class='inline' data-language='shell'>commit</code> command, Git sends the content of your "_staging area_":/blog/git-workflow/#staging-area (new files, modified files, etc) to your local repo, so not the content of your file system at the moment you run it. Most of the times they will be the same, but there's a situation where they may differ. That's the case if you run <code class='inline' data-language='shell'>add</code> for some modified file, but before you run <code class='inline' data-language='shell'>commit</code> you make more changes to that same modified file, and then run <code class='inline' data-language='shell'>commit</code> *without* running <code class='inline' data-language='shell'>add</code> again for that later change. In such case, Git will not commit your later changes, only the ones that were added to the staging area using <code class='inline' data-language='shell'>add</code> command. This is a gotcha using Git, and illustrates how it uses its concept of staging area.

  To send your changes to your local repository you run:

  <code class='inline' data-language='shell'>
  $ git commit -m "your commit message here"
  </code>

  The commit message is mandatory and you should do it anyway, it's a best practice. Since you should commit often, your messages should be simple but descriptive.

  You can commit how may times you want before sending it to a remote repository.

  h3(#pushing-changes-to-a-remote-repository). Pushing changes to a remote repository

  The time will come when you want to send your precious changes to a safe and warm remote repository, right? I hope you've said __yes__.

  To send changes to a remote repository you should have one, obviously, but you also need a reference to it in your local repository. Assuming you already have a remote repository configured somewhere (you can always setup one for free on <a href="http://github.com" target="_blank">GitHub</a> or <a href="https://bitbucket.org" target="_blank">Bitbucket</a>), there are two ways to create a reference to it in your local repo. The first, and easier one, is cloning an existing repo. In that case, Git automatically creates a reference to your cloned repo, naming it _origin_. But if you created your local repo from scratch using <code class='inline' data-language='shell'>init</code>, and time has come for you to send your local repo to a remote repo for the first time, you have to set up a reference to it manually by running a command like:

  <code class='inline' data-language='shell'>
  $ git remote add [remote-name] [remote-url]
  </code>

  <code class='inline' data-language='shell'>remote-name</code> is the name you want to give to that repository, it's an alias for it.
  <code class='inline' data-language='shell'>remote-url</code> is the url to your remote repository, and it depends on the protocol you'll be using (ssh, https, git://, etc)

  Usually, you'll create an <code class='inline' data-language='shell'>origin</code> alias pointing to your canonical remote repository, like:
  <code class='inline' data-language='shell'>
  $ git remote add origin git@github.com:flsilva/as3coreaddendum.git
  </code>

  That creates a new __reference__ to your remote repository with the <code class='inline' data-language='shell'>origin</code> alias. You can always check all your remote references by running <code class='inline' data-language='shell'>$ git remote -v</code>

  Now, to send your local changes to a remote repo you run a command like <code class='inline' data-language='shell'>$ git push [remote] [branch]</code>, for example:

  <code class='inline' data-language='shell'>
  $ git push origin master
  </code>

  <code class='inline' data-language='shell'>master</code> is the name of the default main branch in Git. Don't worry about it right now, "branching":/blog/git-branching-and-merging/ is the subject of our next article about Git.

  <div class="info-box">
  <span class="warning icon"></span>

  You'll need write permission to a remote repository to successfully run a <code class='inline' data-language='shell'>push</code> command.

  </div>

  h3(#pulling-changes-from-a-remote-repository). Pulling changes from a remote repository

  You should always run a <code class='inline' data-language='shell'>pull</code> command before running <code class='inline' data-language='shell'>push</code>, because if someone else has pushed to the remote repository, you'll have to pull it first, before being able to push your changes. Git enforces it. Also, before pulling changes from a remote repo, you should commit your local changes.

  To _pull_ from a remote repository you run a command like <code class='inline' data-language='shell'>$ git pull [remote]</code>, for example:

  <code class='inline' data-language='shell'>
  $ git pull origin
  </code>

  A <code class='inline' data-language='shell'>pull</code> command fetches all changes from a target remote repo, and starts a <code class='inline' data-language='shell'>merge</code> command. If there are no conflicts to resolve (don't worry about it now), you just have to confirm the default merge message (you can change it if you want). After that you're up-to-date to your remote repo, so ready to <code class='inline' data-language='shell'>push</code> to it. That makes a basic push flow to look like this: <code class='inline' data-language='shell'>commit</code> -> <code class='inline' data-language='shell'>pull</code> -> <code class='inline' data-language='shell'>push</code>.

  h3(#deleting-files-and-directories). Deleting files and directories

  One of the things that I love about Git over SVN is that you don't have to do anything special to delete files and directories. Just delete them the way you want, using your OS's GUI or command line tool. Git will notice it, and report their status as __deleted__, so you just need to run <code class='inline' data-language='shell'>$ git add .</code> as usual to prepare your changes to go on the next commmit.


  h3(#renaming-and-moving-files-and-directories). Renaming and moving files and directories

  The same is true for renaming and moving files and directories. Just do that the way you want, you don't have to worry about anything. Lovely, isn't it?

  h3(#viewing-commit-history). Viewing the commit history

  Sometimes you'll want to take a look at the commit history. The simplest way is by running:

  <code class='inline' data-language='shell'>
  $ git log
  </code>

  But that prints all commits, so that useful. So, you can limit it:

  <code class='inline' data-language='shell'>
  $ git log -3
  </code>

  That prints only the last 3 commits. If you want to see a bit more info about each commit:

  <code class='inline' data-language='shell'>
  $ git log -3 --stat
  </code>

  You can filter commits by time, for example in the last two weeks:

  <code class='inline' data-language='shell'>
  $ git log --since=2.weeks
  </code>

  Another useful option is to filter commits that has changed a specific directory or file:

  <code class='inline' data-language='shell'>
  $ git log -- path/to/directory-name
  </code>

  <code class='inline' data-language='shell'>
  $ git log -- path/to/file-name
  </code>

  Or filtering commits by commiter / author:

  <code class='inline' data-language='shell'>
  $ git log --committer=Flavio
  </code>

  <code class='inline' data-language='shell'>
  $ git log --author=Flavio
  </code>

  A simple and nice GUI tool is distributed with Git and can also show the commit history. To launch it you just run:

  <code class='inline' data-language='shell'>
  $ gitk
  </code>

  And, that's it! You should now have a much better sense about how Git works, and how to easily use it for most basic tasks. Do you think there's a basic command not listed here? Please let me know in the comments.

  Feeling smart and fearless? Head to "Git Branching and Merging":/blog/git-branching-and-merging/ to start leaning some advanced and very useful commands Git provides us.

  h3(#related-posts). Related Posts

  "Git Branching and Merging":/blog/git-branching-and-merging/
  "Git Tagging":/blog/git-tagging/
  "Git Workflow":/blog/git-workflow/
  "Introduction to Git":/blog/introducing-git/

  h3(#interesting-links). Interesting Links

  <a href="http://git-scm.com/" target="_blank">Git</a>
  <a href="http://progit.org/book/" target="_blank">Pro Git Book</a>

  h3(#bibliography). Bibliography

  Chacon, Scott. _Pro Git_. Apress, 2009.

== partial "partials/creative-commons-by-nc-sa"
