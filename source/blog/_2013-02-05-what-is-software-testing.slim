textile:
  "Software testing is a process, or a series of processes, designed to make sure computer code does what it was designed to do and that it does not do anything unintended." (Myers et al. 1-2).

  The goal of software testing must be find _bugs_, not to attest that a software has no _bugs_ or that it works (Patton 10). If you are only testing the software to attest that it works you'll miss _bugs_. This is the right approach to software testing, which will guide all testing activities. It's only possible to say that a software has _bugs_, it's not possible to say that a software has no _bugs_ (due to inumerous possibilities involving software testing). So you can only say that in certain tests no _bugs_ were found.

  Another important issue is when a _bug_ is found. The testing activity has the purpose of **finding bugs as soon as possible** and **make sure they get fixed**. The sooner a _bug_ is found, the cheaper it's to fix it (time / money). The best time to find _bugs_ is in early stages (e.g. planning, requirement analysis, development) and the worst is after the product release.

  So there are _bugs_, a lot of them, but what exactly is a _bug_?
  This may seem a silly question, but it's not. In fact, sometimes tricky issues  arise and not all are _bugs_. The subject even deserved an article itself, where I expose solid parameters to be able to decide whether something really is a _bug_. If you've missed it, be sure to read before proceeding:

  <span style="font-size:18px;">"What exactly is a software bug?":/blog/what-really-is-a-software-bug</span>

  Another important subject about software testing is the product specification. It is a key documentation and must exist for any product. I've written an article about it too:

  <span style="font-size:18px;">"What is a product specification?":/blog/what-is-a-product-specification/</span>

  h3(#who-is-the-software-tester). Who is the software tester?

  "Today, most mature companies treat software testing as a technical engineering profession." (Patton 10).
  Although some companies have dedicated software testers, there are many other companies where developers, project coordinators and quality assurance professionals perform software testing tasks, acting as a software tester of some degree. So when you see me using the term _software tester_ I'm refering to anyone performing software testing tasks.

  h3(#what-makes-a-good-software-tester). What makes a good software tester?

  Software testers can't be shy or lazy. They must be disciplined, explorers, proactives, thoroughs, attentives, among others things. And beyond these skills, they also need other soft skills such as good communication, diplomacy and common sense. It's a considerable range of skills, but only the software tester by occupation should strive to achieve all of them. A good software tester doesn't need to know software programming, although it may help.

  h3(#what-can-be-tested). What can be tested?

  Besides the software itself (the program), software testing techniques can be applied to test other artifacts of the product such as the product specification, user manuals, help files, setup and installation, readme files, error messages, etc.

  Software testing is a huge and complex subject, but also very important and present today. In next articles I'll be talking about several topics about it. Stay tuned.

  h3(#related-posts). Related Posts

  "What really is a software bug?":/blog/what-really-is-a-software-bug
  "What is a Product Specification?":/blog/what-is-a-product-specification/
  "How to Report Bugs Effectively":/blog/how-to-report-bugs-effectively/

  h3(#interesting-links). Interesting Links

  <a href="http://en.wikipedia.org/wiki/Software_testing" target="_blank">Software testing (Wikipedia)</a>
  <a href="http://www.softwaretestinghelp.com/" target="_blank">Software Testing Help</a>
  <a href="http://en.wikipedia.org/wiki/Software_testability" target="_blank">Software testability (Wikipedia)</a>

  h3(#bibliography). Bibliography

  Myers, Glenford J., et al. _The Art of Software Testing_. 2nd ed. John Wiley & Sons, 2004.
  Patton, Ron. _Software Testing_. 2nd ed. Sams, 2005.
