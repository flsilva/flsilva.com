textile:
  It's not uncommon the need to protect some content on a webserver, you might want to protect some client's content, for example, but you don't have / want a webapp and all the burden to implement an app level authentication. Hopefully, Nginx provides a very simple way to protect files and directories using HTTP Authentication.

  h3(#step-1-installing-apache-htpasswd). Step 1. Installing Apache's apache2-utils

  I know what you might be thinking: "What? I'm not using Apache, I'm using Nginx!". Dont' worry, I know! To use HTTP Authentication, Nginx needs a file which stores the username and encrypted password, and __htpasswd__, an Apache utility inside __apache2-utils__ package, is the easiest way to do that, although there are alternatives. Don't worry, you're not installing the whole Apache package, just the __apache2-utils__ one. You can <a href="https://packages.debian.org/sid/apache2-utils" target="_blank">click here</a> to see more information about that package on <a href="https://www.debian.org/" target="_blank">Debian</a> (probably the same package for <a href="http://www.ubuntu.com/" target="_blank">Ubuntu</a>).

  If you're on Mac OSX, Apache already comes installed, so you can skip to the next step. If you're on a Linux system, and it doesn't have Apache installed, install __apache2-utils__ running:

  <code class='inline' data-language='shell'>
  $ sudo apt-get install apache2-utils
  </code>

  h3(#step-2-creating-user-and-password). Step 2. Creating a User and Password

  Now let's create the user and password, in a new file:

  <code class='inline' data-language='shell'>
  $ sudo htpasswd -c /etc/nginx/.htpasswd user_a
  </code>

  In that example we're creating a <code class='inline' data-language='shell'>.htpasswd</code> file at Nginx' root directory (that's default Debian / Ubuntu Nginx location, if you're on a different system don't forget to point to the right directory). You can choose any name and location for your file, but do not put it in a web-accessible location! We're also adding the <code class='inline' data-language='shell'>user_a</code> to it. Next you should be asked to put the password.

  You can store any number of user/password to a single file. To do that you just need to omit the <code class='inline' data-language='shell'>-c</code> flag. If you do so, though, any valid user will be able to see any protected content. So you can have more security if you store one (or a couple) users for each content you're protecting. That's because when you protect a content, you tell Nginx to look at some file for valid users, as you'll see next. So any user in that file will be able to see any content that points to that file. If you have several protected URLs for different clients, and you want them to see only their content, you should create one file and one user / password for each client.

  h3(#step-3-setting-up-nginx). Step 3. Setting up Nginx

  Now you need to add some simple configuration to your website's configuration file, inside the <code class='inline' data-language='shell'>server {}</code> block.

  If you want to protect a directory:

  <pre><code data-language='shell'>
  location ^~ /my-protected-directory {
      auth_basic "Restricted";
      auth_basic_user_file /etc/nginx/.htpasswd;
      index  index.html index.htm;
  }
  </code></pre>

  All its files and subdirectories will be protected.

  If you want to protect a single file:

  <pre><code data-language='shell'>
  location ^~ /my-directory/my-file.html {
      auth_basic "Restricted";
      auth_basic_user_file /etc/nginx/.htpasswd;
      index  index.html index.htm;
  }
  </code></pre>

  Don't forget to change the path of your <code class='inline' data-language='shell'>.htpasswd</code> file in the <code class='inline' data-language='shell'>auth_basic_user_file</code> directive.

  Now you just need to restart Nginx so your changes can take effect.

  h3(#step-4-restarting-nginx). Step 4. Restarting Nginx

  <code class='inline' data-language='shell'>
  $ sudo /etc/init.d/nginx restart
  </code>

  Don't forget to change your Nginx installation path if you're not on Ubuntu / Debian.

  Now when you visit your protected content your browser should prompt you a username and password.

  h3(#deleting-user). Deleting a User

  If you want to delete a user from a file, run:

  <code class='inline' data-language='shell'>
  $ sudo htpasswd -D /etc/nginx/.htpasswd user_a
  </code>

  Where <code class='inline' data-language='shell'>/etc/nginx/.htpasswd</code> is the path of your file and <code class='inline' data-language='shell'>user_a</code> is the user to be removed.

  h3(#interesting-links). Interesting Links

  <a href="http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html" target="_blank">Nginx HttpAuthBasic Module</a>

== partial "partials/creative-commons-by-nc-sa"
